---
const { id, initialCount = 0 } = Astro.props;
const endpoint = import.meta.env.PUBLIC_VOTE_ENDPOINT ?? "/api/vote";
---
<button
  class="group inline-flex items-center gap-2 rounded-full border-4 border-ink bg-white px-4 py-2 text-xs font-bold uppercase tracking-[0.3em] text-ink transition hover:-translate-y-1"
  data-id={id}
  data-count={initialCount}
  data-vote-button
  type="button"
>
  <span class="vote-arrow rounded-full bg-fuchsia-500 px-2 py-1 text-ink transition-transform">▲</span>
  <span class="vote-count" aria-live="polite" role="status">{initialCount}</span>
  <span class="loading-spinner hidden">⟳</span>
</button>
<script define:vars={{ endpoint }}>
  // endpoint is now available in the script scope

  const bindVoteButton = (button: HTMLButtonElement) => {
    if (button.dataset.voteBound === "true") return;
    button.dataset.voteBound = "true";
    button.addEventListener("click", async () => {
      if (button.disabled) return;

      const id = button.dataset.id;
      if (!id) {
        console.error("Vote button is missing a data-id attribute.");
        return;
      }

      const updateCount = (next: number) => {
        button.dataset.count = String(next);
        const countEl = button.querySelector<HTMLElement>(".vote-count");
        if (countEl) countEl.textContent = String(next);
      };

      const showLoading = (show: boolean) => {
        const spinner = button.querySelector<HTMLElement>(".loading-spinner");
        const arrow = button.querySelector<HTMLElement>(".vote-arrow");
        if (spinner && arrow) {
          if (show) {
            spinner.classList.remove("hidden");
            arrow.style.transform = "scale(1.2) rotate(180deg)";
          } else {
            spinner.classList.add("hidden");
            arrow.style.transform = "";
          }
        }
      };

      const count = Number(button.dataset.count ?? "0");
      const next = count + 1;
      
      // Optimistic update with visual feedback
      updateCount(next);
      showLoading(true);
      button.disabled = true;
      button.setAttribute("aria-busy", "true");
      
      // Add bounce animation
      button.style.transform = "scale(1.1)";
      setTimeout(() => button.style.transform = "", 150);

      try {
        const response = await fetch(endpoint, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ id }),
        });

        if (!response.ok) {
          throw new Error(`Vote request failed with status ${response.status}`);
        }
        
        // Success feedback with professional notification
        const arrow = button.querySelector<HTMLElement>(".vote-arrow");
        if (arrow) {
          arrow.style.backgroundColor = "#10b981"; // green
          setTimeout(() => arrow.style.backgroundColor = "", 1000);
        }
        
        // Show elegant success notification
        showVoteSuccessNotification();
      } catch (error) {
        console.error("Vote error", error);
        updateCount(count);
        
        // Error feedback
        const arrow = button.querySelector<HTMLElement>(".vote-arrow");
        if (arrow) {
          arrow.style.backgroundColor = "#ef4444"; // red
          setTimeout(() => arrow.style.backgroundColor = "", 1000);
        }
      } finally {
        showLoading(false);
        button.disabled = false;
        button.removeAttribute("aria-busy");
      }
    });
  };

  const hydrateVoteButtons = () => {
    document
      .querySelectorAll<HTMLButtonElement>("[data-vote-button]")
      .forEach((button) => bindVoteButton(button));
  };

  // Show professional vote success notification
  const showVoteSuccessNotification = () => {
    // Remove any existing notifications
    document.querySelectorAll('.vote-notification').forEach(el => el.remove());
    
    // Create elegant notification
    const notification = document.createElement('div');
    notification.className = 'vote-notification fixed top-4 right-4 z-50 transform translate-x-full transition-transform duration-300';
    notification.innerHTML = `
      <div class="rounded-xl border-2 border-green-500 bg-white shadow-lg p-4 max-w-sm">
        <div class="flex items-center gap-3">
          <div class="rounded-full bg-green-500 p-1">
            <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
            </svg>
          </div>
          <div>
            <p class="font-semibold text-green-800 text-sm">Vote Counted!</p>
            <p class="text-green-700 text-xs">Changes sync across users within 1-2 minutes</p>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // Slide in
    setTimeout(() => {
      notification.style.transform = 'translateX(0)';
    }, 100);
    
    // Slide out and remove
    setTimeout(() => {
      notification.style.transform = 'translateX(full)';
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  };

  // Make functions available globally for dynamic content
  (window as any).hydrateVoteButtons = hydrateVoteButtons;
  (window as any).bindVoteButton = bindVoteButton;
  (window as any).showVoteSuccessNotification = showVoteSuccessNotification;

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", hydrateVoteButtons, { once: true });
  } else {
    hydrateVoteButtons();
  }
</script>
