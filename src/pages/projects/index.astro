---
import BaseLayout from "@layouts/BaseLayout.astro";
import ProjectCard from "@components/ProjectCard.astro";
import { projects } from "@data/projects";
---
<BaseLayout
  title="CURATIONS Projects"
  description="Card-based directory of Human Ã— AI community builds."
>
  <section class="mx-auto max-w-6xl px-6 py-16">
    <header class="mb-12 space-y-4">
      <p class="text-xs uppercase tracking-[0.35em] text-ink/60">Open Source Showcase</p>
      <h1 class="font-display text-5xl uppercase tracking-[0.35em]">Project Directory</h1>
      <p class="max-w-3xl text-sm leading-relaxed text-ink/70">
        Explore the builds powering the CURATIONS ecosystem. Each card links to live repos, status updates, and deep dives.
      </p>
    </header>
    <div class="grid gap-8 md:grid-cols-2">
      {projects.map((project) => (
        <ProjectCard project={project} />
      ))}
    </div>
  </section>

  <script>
    // Load live vote counts for all projects
    async function loadLiveVotes() {
      try {
        const response = await fetch('/api/votes?' + Date.now()); // Cache bust
        if (response.ok) {
          const votes = await response.json();
          
          // Update all vote buttons with live counts
          document.querySelectorAll('[data-vote-button]').forEach(button => {
            const id = button.dataset.id;
            if (id && votes[id] !== undefined) {
              const countEl = button.querySelector('.vote-count');
              const currentCount = votes[id];
              const oldCount = Number(button.dataset.count || '0');
              
              button.dataset.count = String(currentCount);
              if (countEl) countEl.textContent = String(currentCount);
              
              // Highlight if count increased
              if (currentCount > oldCount) {
                const arrow = button.querySelector('.vote-arrow');
                if (arrow) {
                  arrow.style.backgroundColor = '#10b981';
                  arrow.style.transform = 'scale(1.2)';
                  setTimeout(() => {
                    arrow.style.backgroundColor = '';
                    arrow.style.transform = '';
                  }, 800);
                }
              }
            }
          });
        }
      } catch (error) {
        console.error('Failed to load live vote counts:', error);
      }
    }

    // Auto-refresh every 15 seconds
    let refreshInterval;
    
    function startAutoRefresh() {
      refreshInterval = setInterval(loadLiveVotes, 15000);
    }
    
    function stopAutoRefresh() {
      if (refreshInterval) clearInterval(refreshInterval);
    }
    
    // Start auto-refresh when page is visible
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        stopAutoRefresh();
      } else {
        startAutoRefresh();
        loadLiveVotes(); // Refresh immediately when returning
      }
    });

    // Load data when page is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        loadLiveVotes();
        startAutoRefresh();
      });
    } else {
      loadLiveVotes();
      startAutoRefresh();
    }
  </script>
</BaseLayout>
